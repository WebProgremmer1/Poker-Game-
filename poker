# gradio as gr 
import heapq, random

num_cards = int(input('How many cards you would like to have?'))




arr =[]
lst_suits = ["♠", "♥", "♦", "♣"]            
for i in range(1, num_cards+1):
    while True:
        cards = random.randint(2, num_cards)
        suits_index = random.sample(range(0, 4), 1)[0]
        suits = lst_suits[suits_index]
        cards_suits = (str(cards) + suits)
        if cards_suits not in arr:
            arr.append(cards_suits)
            break
print(arr)

def quicksort(arr, left, right):
    if left < right:
        partition_pos = partition(arr, left, right)
        quicksort(arr, left, partition_pos - 1)
        quicksort(arr, partition_pos + 1, right)

def rank(card):
    k = 0
    while k < len(card) and card[k].isdigit():
        k += 1
    return int(card[:k])

def partition(arr, left, right):
    i = left
    j = right - 1
    pivot = arr[right]

    while True:
        # move i to first element > pivot
        while i <= j and rank(arr[i]) <= rank(pivot):
            i += 1
        # move j to last element <= pivot (strictly greater keeps right side)
        while j >= i and rank(arr[j]) > rank(pivot):
            j -= 1

        if i >= j:
            break

        arr[i], arr[j] = arr[j], arr[i]
        i += 1
        j -= 1

    arr[i], arr[right] = arr[right], arr[i]

    return i


quicksort(arr, 0, len(arr) - 1)
print(arr)
